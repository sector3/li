#!/Users/user/pkg/bin/lua5.2

curses = require 'curses'

if (#arg ~= 1) then
    io.write('usage: li [file]\n')
    os.exit()
end

function fileToTable(f)
    local i = 0
    return function () i = i + 1; return f:read('*l'), i end
end

file = { name = arg[1],
         buf = {},
         lineCount = function() return #file.buf end,
         -- there are no newlines in buf. charCount result differs from
         charCount = function()     -- wc -l [samefile]
                        local count = 0
                        for i = 1, file.lineCount() do
                            count = count + #file.buf[i]
                        end
                        return count
                     end
       }
-- check arg[1] for filename, try open, else create
f = io.open(arg[1], 'r')       -- existing file
if ( f ~= nil ) then
    -- populate our file buffer with the contents of file
    for l, i in fileToTable(f) do
        file.buf[i] = l
    end
    f:seek('set', 0)
    f:close()
end

-- init screen and get some info
curses.initscr()
curses.cbreak()
curses.echo(false)
curses.nl(false)
stdscr = curses.stdscr()
stdscr:clear()
Y, X = stdscr:getmaxyx()
screen = { x = X, y = Y }

-- print file if exists
if file.charCount() == 0 then
    for i = 1,screen.x do stdscr:mvaddstr(i,0,'~') end
else
    local i = 0
    for k,l in pairs(file.buf) do
        stdscr:mvaddstr(i,0,l)
        i = i + 1
        for j = i,screen.x do stdscr:mvaddstr(j,0,'~') end
    end
end
stdscr:move(0,0)
stdscr:refresh()

-- input mode
repeat            -- if character is printable
c = stdscr:getch() ; if c < 256 then c = string.char(c) end
until (     c == 'q'       -- Unsure how to do this. There are a lot of cmds
         or c == 'q'    )  -- in vi. List could be inclusive or exclusive.

-- print info and quit
curses.endwin()
