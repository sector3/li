#!/Users/user/pkg/bin/lua5.2

curses = require 'curses'

if (#arg ~= 1) then
    io.write('usage: li [file]\n')
    os.exit()
end

function fileToTable(f)
    local i = 0
    return function () i = i + 1; return f:read('*l'), i end
end

file = { name = arg[1],
         buf = {},
         lineCount = function() return #file.buf end,
         -- there are no newlines in buf. charCount result differs from
         charCount = function()     -- wc -c [samefile]
                        local count = 0
                        for i = 1, file.lineCount() do
                            count = count + #file.buf[i]
                        end
                        return count
                     end
       }
-- check arg[1] for filename, try open, else create
f = io.open(arg[1], 'r')       -- existing file
if ( f ~= nil ) then
    -- populate our file buffer with the contents of file
    for l, i in fileToTable(f) do
        file.buf[i] = l
    end
    f:close()
end

function quit()
    curses.endwin()
    os.exit()
end

-- init screen and get some info
curses.initscr()
curses.cbreak()
curses.echo(false)
curses.nl(false)
stdscr = curses.stdscr()
stdscr:clear()
Y, X = stdscr:getmaxyx()
screen = { x = X, y = Y }

-- print file if exists
if file.charCount() == 0 then
-- we subtract 1 from screen.y because we don't print on the topmost row
    for i = 1,screen.y-1 do stdscr:mvaddstr(i,0,'~') end
else
    local i = 0
    for k,l in pairs(file.buf) do
        stdscr:mvaddstr(i,0,l)
        i = i + 1
        for j = i,screen.y do stdscr:mvaddstr(j,0,'~') end
    end
end
stdscr:move(0,0)
stdscr:refresh()

-- command mode
while true do
                  -- if character is printable
c = stdscr:getch() ; if c < 256 then c = string.char(c) end
-- Unsure how to handle this. There are a lot of cmds in vi.
-- The list could be inclusive or exclusive.
    if    (     c == ':'            -- ex mode
             or c == 'a'            -- insert mode (append restrictions)
             or c == 'w'            -- beginning of next word
             or c == 'W'    )       -- beginning of previous word
    then
        if (c == ':') then
            --stdscr:mvaddstr(screen.y,0,':')
            stdscr:move(screen.y-1,0)
            stdscr:clrtoeol()
            stdscr:mvaddstr(screen.y-1,0,':')
            stdscr:refresh()
            str = ''    -- don't yet know if we want this global or not...
            local x = 0
            repeat
                inChar = stdscr:getch()
                -- if character is CR
                if inChar ~= 13 then
                    local c = string.char(inChar)
                    x = x + 1
                    str = str .. c
                    stdscr:mvaddstr(screen.y-1,x,c)
                end
            until (inChar == 13)
            if str == 'q'
            then quit()
            else -- invalid ex command. print error.
                stdscr:mvaddstr(screen.y-1,0,
                                'Not a valid editor command: '..str)
                stdscr:refresh()
            end
        end
    end
end
